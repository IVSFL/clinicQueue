package controllers

import (
	"clinicQueue/config"
	"clinicQueue/models"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
)

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–∞–ª–æ–Ω–∞ –ø–æ specializationID
func GenerateTicketNumber(specializationID uint) (string, error) {
	var spec models.Specialization
	if err := config.DB.First(&spec, specializationID).Error; err != nil {
		return "", err
	}

	today := time.Now().Format("2006-01-02")
	var count int64
	err := config.DB.Model(&models.Ticket{}).
		Where("specialization_id = ? AND DATE(created_at) = ?", specializationID, today).
		Count(&count).Error
	if err != nil {
		return "", err
	}

	return fmt.Sprintf("%s%03d", spec.Prefix, count+1), nil
}

func CreateTicket(c *gin.Context) {
	var req struct {
		PatientID      uint   `json:"patient_id"`
		Specialization string `json:"specialization"` // —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–ª–æ–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä "–¢–µ—Ä–∞–ø–µ–≤—Ç"
	}

	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	// üîπ –ù–∞—Ö–æ–¥–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
	var spec models.Specialization
	if err := config.DB.Where("name = ?", req.Specialization).First(&spec).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		return
	}

	// üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–∞–ª–æ–Ω–∞
	ticketNumber, err := GenerateTicketNumber(spec.ID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∞–ª–æ–Ω–∞"})
		return
	}

	// –°–æ–∑–¥–∞—ë–º —Ç–∞–ª–æ–Ω
	ticket := models.Ticket{
		PatientID:        req.PatientID,
		SpecializationID: spec.ID,
		TicketNumber:     ticketNumber,
		Status:           "waiting",
		CreatedAt:        time.Now(),
	}

	if err := config.DB.Create(&ticket).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–ª–æ–Ω–∞"})
		return
	}

	// –ù–∞—Ö–æ–¥–∏–º –≤—Ä–∞—á–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	var doctor models.Doctor
	if err := config.DB.Where("specialization_id = ?", spec.ID).First(&doctor).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–í—Ä–∞—á –ø–æ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
	var count int64
	config.DB.Model(&models.Queue{}).Where("doctor_id = ?", doctor.ID).Count(&count)

	queue := models.Queue{
		DoctorID:  doctor.ID,
		PatientID: req.PatientID,
		TicketID:  ticket.ID,
		Position:  int(count + 1),
	}

	if err := config.DB.Create(&queue).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message":        "–¢–∞–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å",
		"ticket_number":  ticket.TicketNumber,
		"doctor_id":      doctor.ID,
		"patient_id":     req.PatientID,
		"queue_position": queue.Position,
	})
}
